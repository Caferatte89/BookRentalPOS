package my.edu.tarc.dco.bookrentalpos;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author Looz
 */
public class MemberManager {

    private Member[] memberList;
    private int memberCount;
    private DBManager db;
    private final int ARRAY_SIZE = 100;

    public MemberManager(DBManager db) {
	System.out.println("cons");
	memberCount = 0;
	memberList = new Member[ARRAY_SIZE];
	this.db = db;
	String sql = "SELECT * FROM member;";
	try {
	    java.sql.ResultSet rs = db.resultQuery(sql);
	    while (rs.next()) {
		Member s = new Member(rs.getInt("id"), rs.getString("date"), rs.getString("name"),
			rs.getString("phoneNo"), rs.getString("email"), rs.getString("IC"));
		memberList[memberCount++] = s;
	    }
	} catch (java.sql.SQLException err) {
	    System.out.println(err.getMessage());
	}
    }

    public Member getMember(int memID) {
	for (int i = 0; i < memberCount; i++) {
	    if (memberList[i].getID() == memID) {
		return memberList[i];
	    }
	}
	return null;
    }

    public boolean registerMember(Member mem) {
	String sql = String.format("INSERT INTO member(name, phoneNo, email, IC) VALUES('%s', '%s', '%s', '%s')",
		mem.getName(), mem.getContacts(ContactType.PHONE), mem.getContacts(ContactType.EMAIL), mem.getICNo());
	if (db.updateQuery(sql) == 1) {
	    try {
		// id and date is generated by sqlite, i need to make a copy of it and store it
		// in my preloaded database
		// this query basically get the latest Mmeber entry inserted into database
		ResultSet rs = db.resultQuery(
			"SELECT id, date FROM member WHERE id = (SELECT seq FROM sqlite_sequence WHERE name='member')");
		mem.setID(rs.getInt("id"));
		mem.setDateCreated(rs.getString("date"));

		// store in my preloaded database
		memberList[memberCount++] = mem;
	    } catch (SQLException err) {
		System.out.println(err.getMessage());
	    }
	    return true;
	} else {
	    return false;
	}
    }

    public boolean removeMember(int memID) {
	String sql = String.format("DELETE FROM member WHERE id=%d", memID);
	Member[] tmpList = new Member[ARRAY_SIZE];

	// [1,23,4,5,6]
	// [1, 23, 5, 6]
	if (db.updateQuery(sql) == 1) {
	    int b = 0;
	    for (int a = 0; a < memberCount; a++) {
		if (memberList[a].getID() != memID) {
		    tmpList[b++] = memberList[a];
		}
	    }
	    memberList = tmpList.clone();
	    memberCount--;
	    return true;
	} else {
	    return false;
	}
    }

}
