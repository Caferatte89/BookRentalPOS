package my.edu.tarc.dco.bookrentalpos;

import bookrentalpos.Dialog;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;

/**
 * Used to load all transactions from the database
 *
 * @author Looz
 * @version 1.0
 */
public class TransactionManager {

    private Transaction[] transactionList;
    private final int ARRAY_SIZE = 100;
    private DBManager db;
    private BookManager bm;
    private MemberManager mm;
    private int transactionCount;

    /**
     * Contains the rates for the deposit to pay for customer
     * HashMap keys:    rentalWeeks
     * HashMap values:  rates in %
     * If more than 4 weeks, 10% applies
     */
    public final HashMap<Integer, Integer> DEPOSIT_RATES = new HashMap<Integer, Integer>() {
        {
            put(1, 10);
            put(2, 20);
            put(3, 30);
            put(4, 50);
        }
    };

    /**
     * This variable is storing the members points needed to apply discount
     */
    public final int MEMBER_POINTS_NEEDED_TO_CLAIM_DISCOUNT = 500;

    /**
     * Deposit deduction for each day the customer is late in returning the book
     */
    public final int PENALTY_RATES = 5;

    public TransactionManager(DBManager db, BookManager bm, MemberManager mm) {
        this.db = db;
        this.bm = bm;
        this.mm = mm;
        transactionCount = 0;
        transactionList = new Transaction[ARRAY_SIZE];
        try {
            ResultSet rs = db.resultQuery("SELECT * FROM transactions");
            while (rs.next()) {
                Transaction t = new Transaction(
                        rs.getInt("id"),
                        rs.getString("date"),
                        TransactionType.valueOf(rs.getString("type")),
                        rs.getInt("staffHandled"),
                        rs.getInt("memberInvolved"),
                        rs.getInt("bookInvolved"),
                        rs.getInt("rentDurationInDays"),
                        rs.getDouble("cashFlow")
                );
                transactionList[transactionCount++] = t;
            }
            updateBookReservationStatus();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /***
     * this function accepts transaction object where there is no id and date`
     * @param trans accept Transaction object
     * @return Return true if the transaction was added into database successfully
     */
    public boolean addTransaction(Transaction trans) {
        String sql = String.format(
                "INSERT INTO transactions(type, staffHandled, memberInvolved, bookInvolved, rentDurationInDays, cashFlow) VALUES('%s',%d,%d,%d,%d,%f)",
                trans.getType(),
                trans.getStaffHandled(),
                trans.getMemberInvovled(),
                trans.getBookInvovled(),
                trans.getRentDurationInDays(),
                trans.getCashFlow());
        if (db.updateQuery(sql) == 1) {
            try {
                // id and date is generated by sqlite, i need to make a copy of it and store it in my preloaded database
                // this query basically get the latest transactions entry inserted into database
                ResultSet rs = db.resultQuery("SELECT id, date FROM transactions WHERE id = (SELECT seq FROM sqlite_sequence WHERE name='transactions')");
                trans.setID(rs.getInt("id"));
                trans.setDateCreated(rs.getString("date"));

                // store in my preloaded database
                transactionList[transactionCount++] = trans;

                // Update respective table based on the transaction type
                Book b = bm.getBookById(trans.getBookInvovled());
                switch (trans.getType()) {
                    case RENT:
                        b.setLastRentedBy(trans.getMemberInvovled());
                        b.setRented(true);
                        b.setReserved(false);
                        bm.updateBook(b);
                        break;
                    case RETURN:
                        b.setRented(false);
                        bm.updateBook(b);
                        break;
                    case RESERVE:
                        b.setLastReservedBy(trans.getMemberInvovled());
                        b.setReserved(true);
                        bm.updateBook(b);
                        break;
                    case DISCOUNT:
                        Member memberToEdit = mm.getMember(trans.getMemberInvovled());
                        if (memberToEdit != null) {
                            System.out.println("HOWDY");
                            memberToEdit.setMemberPoints(memberToEdit.getMemberPoints() - 500);
                            this.mm.updateMember(memberToEdit);
                        }
                        break;
                }

            } catch (SQLException err) {
                System.out.println(err.getMessage());
            }
            return true;
        } else {
            return false;
        }
    }

    /**
     * This function is suppose to update the reservation status of all the books<br>
     * Criteria as stated below: <br>
     * - If the book is not reserved, dont touch it<br>
     * - If the book is reserved, check if the book is being rented at the moment<br>
     * - If the book is rented, dont touch it<br>
     * - If the book is not rented, or in other words it was returned, check if (return date - current date) > 7 days<br>
     * - If > 7 days, set reserved status as false<br>
     * - If !(> 7 days), dont touch it
     */
    public void updateBookReservationStatus() {
        Book[] bookList = this.bm.getBooKListCache();
        for (int a = 0; a < bm.getBookCount(); a++) {
            if (bookList[a].isReserved()) {
                if (!bookList[a].isRented()) {
                    Date currentDate = new Date();

                    String sql = "SELECT * FROM transactions WHERE bookInvolved=" + bookList[a].getId() + " AND type='RETURN' ORDER BY id DESC";
                    String bookReturnedDate_str = "";
                    try {
                        ResultSet rs = db.resultQuery(sql);
                        if (rs != null) {
                            if (rs.next()) {
                                bookReturnedDate_str = rs.getString("date");
                            } else {
                                // if there are no rows next, still wondering how to deal with this
                                Dialog.alertBox("It seems like the reserved book was not rented when its reserved.\nIf you believe this is not your mistake, please contact the devs");
                            }
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        Dialog.alertBox("Something went wrong internally while trying to update BookReservation Status.");
                        return;
                    }

                    Date bookReturnedDate = CustomUtil.stringToDate(bookReturnedDate_str);

                    // Get the difference between current date and the date the book was returned
                    long diff = CustomUtil.daysDifference(currentDate, bookReturnedDate);

                    if (diff > 7) {
                        Book bookToModify = bm.getBookById(bookList[a].getId());
                        bookToModify.setReserved(false);
                        bm.updateBook(bookToModify);
                    }

                }
            }
        }
    }

    /**
     * This function returns transaction of the last renting record of a specific book
     *
     * @param bookID bookID to be checked
     * @return Transaction reference object to the last renting record, return null if bookid is not valid or the book is not currently rented
     */
    public Transaction getBookLastRentTransaction(int bookID) {
        Book bk;
        if ((bk = bm.getBookById(bookID)) == null) {
            return null;
        }
        if (!bk.isRented()) return null;
        for (int a = this.transactionCount - 1; a != -1; a--) {
            if (transactionList[a].getType() == TransactionType.RENT && transactionList[a].getBookInvovled() == bookID) {
                return transactionList[a];
            }
        }
        return null;
    }
}
